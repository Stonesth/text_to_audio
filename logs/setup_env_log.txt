===== DEBUT INSTALLATION 27-02-25 15:28:49,24 ===== 
[27-02-25 15:28:49,24] [INFO] Verification de Python 3.10... 
[27-02-25 15:28:49,37] [COMMAND] Vérification Python 3.10 via py launcher - Début d'exécution 
Python 3.10.9
[27-02-25 15:28:49,41] [COMMAND] Vérification Python 3.10 via py launcher - Fin d'exécution (code: 0) 
[27-02-25 15:28:49,43] [INFO] Python 3.10 trouve via py launcher 
[27-02-25 15:28:49,44] [INFO] Verification de Visual Studio... 
[27-02-25 15:28:49,44] [INFO] Vérification des redistribuables VC++... 
[27-02-25 15:28:49,47] [INFO] Installation des redistribuables VC++ 2022... 
[27-02-25 15:28:49,48] [COMMAND] Téléchargement VC++ Redistributable - Début d'exécution 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
 12 24.4M   12 3057k    0     0  3404k      0  0:00:07 --:--:--  0:00:07 3404k 53 24.4M   53 13.0M    0     0  7032k      0  0:00:03  0:00:01  0:00:02 10.0M 93 24.4M   93 22.9M    0     0  8110k      0  0:00:03  0:00:02  0:00:01  9.9M100 24.4M  100 24.4M    0     0  8239k      0  0:00:03  0:00:03 --:--:-- 10.0M
[27-02-25 15:28:52,67] [COMMAND] Téléchargement VC++ Redistributable - Fin d'exécution (code: 0) 
[27-02-25 15:28:52,68] [COMMAND] Installation VC++ Redistributable - Début d'exécution 
[27-02-25 15:29:17,43] [COMMAND] Installation VC++ Redistributable - Fin d'exécution (code: 0) 
[27-02-25 15:29:17,45] [INFO] Configuration des chemins... 
[27-02-25 15:29:17,48] [DEBUG] Version MSVC détectée: 14.43.34808 
[27-02-25 15:29:17,48] [INFO] Configuration des includes... 
[27-02-25 15:29:17,49] [DEBUG] INCLUDE=C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\VS\include;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\ATLMFC\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\cppwinrt 
[27-02-25 15:29:17,49] [INFO] Configuration des bibliothèques... 
[27-02-25 15:29:17,51] [DEBUG] LIB=C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\ATLMFC\lib\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\ucrt\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\um\x64 
[27-02-25 15:29:17,51] [INFO] Configuration du PATH... 
[27-02-25 15:29:17,52] [INFO] Configuration de l'environnement de build... 
[27-02-25 15:29:17,53] [DEBUG] Appel de vcvarsall.bat 
[27-02-25 15:29:19,14] [DEBUG] vcvars64.bat exécuté avec succès 
[27-02-25 15:29:19,14] [INFO] Creation de l'environnement virtuel... 
[27-02-25 15:29:25,71] [COMMAND] Création environnement virtuel - Début d'exécution 
[27-02-25 15:29:39,85] [COMMAND] Création environnement virtuel - Fin d'exécution (code: 0) 
[27-02-25 15:29:39,95] [DEBUG] Environnement virtuel activé 
[27-02-25 15:29:39,96] [COMMAND] sys - Début d'exécution 
[27-02-25 15:29:40,00] [COMMAND] sys - Fin d'exécution (code: 1) 
[27-02-25 15:29:40,02] [ERROR] Erreur lors de l'exécution de la commande: sys (code: 1) 
[27-02-25 15:29:40,03] [INFO] Installation des dependances de base... 
[27-02-25 15:29:40,05] [COMMAND] Installation pip/setuptools/wheel - Début d'exécution 
Requirement already satisfied: pip in c:\users\jf30lb\projects\python\projects\text_to_audio\venv_py310\lib\site-packages (22.3.1)
Collecting pip
  Downloading pip-25.0.1-py3-none-any.whl (1.8 MB)
     ---------------------------------------- 1.8/1.8 MB 6.5 MB/s eta 0:00:00
Requirement already satisfied: setuptools in c:\users\jf30lb\projects\python\projects\text_to_audio\venv_py310\lib\site-packages (65.5.0)
Collecting setuptools
  Downloading setuptools-75.8.2-py3-none-any.whl (1.2 MB)
     ---------------------------------------- 1.2/1.2 MB 11.2 MB/s eta 0:00:00
Collecting wheel
  Downloading wheel-0.45.1-py3-none-any.whl (72 kB)
     ---------------------------------------- 72.5/72.5 kB 3.9 MB/s eta 0:00:00
Installing collected packages: wheel, setuptools, pip
  Attempting uninstall: setuptools
    Found existing installation: setuptools 65.5.0
    Uninstalling setuptools-65.5.0:
      Successfully uninstalled setuptools-65.5.0
  Attempting uninstall: pip
    Found existing installation: pip 22.3.1
    Uninstalling pip-22.3.1:
      Successfully uninstalled pip-22.3.1
Successfully installed pip-25.0.1 setuptools-75.8.2 wheel-0.45.1
[27-02-25 15:29:57,66] [COMMAND] Installation pip/setuptools/wheel - Fin d'exécution (code: 0) 
[27-02-25 15:29:57,67] [INFO] Vérification des dépendances requises... 
[27-02-25 15:29:57,69] [COMMAND] Installation Cython - Début d'exécution 
Collecting Cython
  Downloading Cython-3.0.12-cp310-cp310-win_amd64.whl.metadata (3.6 kB)
Downloading Cython-3.0.12-cp310-cp310-win_amd64.whl (2.8 MB)
   ---------------------------------------- 2.8/2.8 MB 10.1 MB/s eta 0:00:00
Installing collected packages: Cython
Successfully installed Cython-3.0.12
[27-02-25 15:30:04,60] [COMMAND] Installation Cython - Fin d'exécution (code: 0) 
[27-02-25 15:30:04,63] [INFO] Installation des packages principaux... 
[27-02-25 15:30:04,66] [COMMAND] Installation numpy - Début d'exécution 
Collecting numpy==1.22.0
  Downloading numpy-1.22.0-cp310-cp310-win_amd64.whl.metadata (2.1 kB)
Downloading numpy-1.22.0-cp310-cp310-win_amd64.whl (14.7 MB)
   ---------------------------------------- 14.7/14.7 MB 10.0 MB/s eta 0:00:00
Installing collected packages: numpy
Successfully installed numpy-1.22.0
[27-02-25 15:30:19,18] [COMMAND] Installation numpy - Fin d'exécution (code: 0) 
[27-02-25 15:30:19,20] [COMMAND] Installation torch - Début d'exécution 
Looking in indexes: https://download.pytorch.org/whl/cpu
Collecting torch==2.0.1
  Downloading https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp310-cp310-win_amd64.whl (174.0 MB)
     -------------                          61.3/174.0 MB 10.7 MB/s eta 0:00:11
ERROR: Exception:
Traceback (most recent call last):
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 438, in _error_catcher
    yield
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 561, in read
    data = self._fp_read(amt) if not fp_closed else b""
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 527, in _fp_read
    return self._fp.read(amt) if amt is not None else self._fp.read()
  File "C:\Program Files\Python310\lib\http\client.py", line 465, in read
    s = self.fp.read(amt)
  File "C:\Program Files\Python310\lib\socket.py", line 705, in readinto
    return self._sock.recv_into(b)
  File "C:\Program Files\Python310\lib\ssl.py", line 1274, in recv_into
    return self.read(nbytes, buffer)
  File "C:\Program Files\Python310\lib\ssl.py", line 1130, in read
    return self._sslobj.read(len, buffer)
TimeoutError: The read operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\cli\base_command.py", line 106, in _run_wrapper
    status = _inner_run()
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\cli\base_command.py", line 97, in _inner_run
    return self.run(options, args)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\cli\req_command.py", line 67, in wrapper
    return func(self, options, args)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\commands\install.py", line 386, in run
    requirement_set = resolver.resolve(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\resolver.py", line 95, in resolve
    result = self._result = resolver.resolve(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\resolvelib\resolvers.py", line 546, in resolve
    state = resolution.resolve(requirements, max_rounds=max_rounds)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\resolvelib\resolvers.py", line 397, in resolve
    self._add_to_criteria(self.state.criteria, r, parent=None)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\resolvelib\resolvers.py", line 173, in _add_to_criteria
    if not criterion.candidates:
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\resolvelib\structs.py", line 156, in __bool__
    return bool(self._sequence)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py", line 174, in __bool__
    return any(self)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py", line 162, in <genexpr>
    return (c for c in iterator if id(c) not in self._incompatible_ids)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\found_candidates.py", line 53, in _iter_built
    candidate = func()
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\factory.py", line 187, in _make_candidate_from_link
    base: Optional[BaseCandidate] = self._make_base_candidate_from_link(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\factory.py", line 233, in _make_base_candidate_from_link
    self._link_candidate_cache[link] = LinkCandidate(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py", line 304, in __init__
    super().__init__(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py", line 159, in __init__
    self.dist = self._prepare()
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py", line 236, in _prepare
    dist = self._prepare_distribution()
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\resolution\resolvelib\candidates.py", line 315, in _prepare_distribution
    return preparer.prepare_linked_requirement(self._ireq, parallel_builds=True)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\operations\prepare.py", line 527, in prepare_linked_requirement
    return self._prepare_linked_requirement(req, parallel_builds)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\operations\prepare.py", line 598, in _prepare_linked_requirement
    local_file = unpack_url(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\operations\prepare.py", line 170, in unpack_url
    file = get_http_url(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\operations\prepare.py", line 111, in get_http_url
    from_path, content_type = download(link, temp_dir.path)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\network\download.py", line 148, in __call__
    for chunk in chunks:
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\cli\progress_bars.py", line 55, in _rich_progress_bar
    for chunk in iterable:
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_internal\network\utils.py", line 65, in response_chunks
    for chunk in response.raw.stream(
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 622, in stream
    data = self.read(amt=amt, decode_content=decode_content)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 560, in read
    with self._error_catcher():
  File "C:\Program Files\Python310\lib\contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\lib\site-packages\pip\_vendor\urllib3\response.py", line 443, in _error_catcher
    raise ReadTimeoutError(self._pool, None, "Read timed out.")
pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='download.pytorch.org', port=443): Read timed out.
[27-02-25 15:30:42,32] [COMMAND] Installation torch - Fin d'exécution (code: 2) 
[27-02-25 15:30:42,32] [ERROR] Erreur lors de l'exécution de la commande: Installation torch (code: 2) 
[27-02-25 15:30:42,34] [INFO] Installation des dependances TTS... 
[27-02-25 15:30:42,37] [COMMAND] Installation librosa - Début d'exécution 
Collecting librosa==0.10.0
  Downloading librosa-0.10.0-py3-none-any.whl.metadata (8.3 kB)
Collecting audioread>=2.1.9 (from librosa==0.10.0)
  Downloading audioread-3.0.1-py3-none-any.whl.metadata (8.4 kB)
Requirement already satisfied: numpy>=1.20.3 in c:\users\jf30lb\projects\python\projects\text_to_audio\venv_py310\lib\site-packages (from librosa==0.10.0) (1.22.0)
Collecting scipy>=1.2.0 (from librosa==0.10.0)
  Downloading scipy-1.15.2-cp310-cp310-win_amd64.whl.metadata (60 kB)
Collecting scikit-learn>=0.20.0 (from librosa==0.10.0)
  Downloading scikit_learn-1.6.1-cp310-cp310-win_amd64.whl.metadata (15 kB)
Collecting joblib>=0.14 (from librosa==0.10.0)
  Downloading joblib-1.4.2-py3-none-any.whl.metadata (5.4 kB)
Collecting decorator>=4.3.0 (from librosa==0.10.0)
  Downloading decorator-5.2.1-py3-none-any.whl.metadata (3.9 kB)
Collecting numba>=0.51.0 (from librosa==0.10.0)
  Downloading numba-0.61.0-cp310-cp310-win_amd64.whl.metadata (2.8 kB)
Collecting soundfile>=0.12.1 (from librosa==0.10.0)
  Downloading soundfile-0.13.1-py2.py3-none-win_amd64.whl.metadata (16 kB)
Collecting pooch>=1.0 (from librosa==0.10.0)
  Downloading pooch-1.8.2-py3-none-any.whl.metadata (10 kB)
Collecting soxr>=0.3.2 (from librosa==0.10.0)
  Downloading soxr-0.5.0.post1-cp310-cp310-win_amd64.whl.metadata (5.6 kB)
Collecting typing-extensions>=4.1.1 (from librosa==0.10.0)
  Downloading typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)
Collecting lazy-loader>=0.1 (from librosa==0.10.0)
  Downloading lazy_loader-0.4-py3-none-any.whl.metadata (7.6 kB)
Collecting msgpack>=1.0 (from librosa==0.10.0)
  Downloading msgpack-1.1.0-cp310-cp310-win_amd64.whl.metadata (8.6 kB)
Collecting packaging (from lazy-loader>=0.1->librosa==0.10.0)
  Downloading packaging-24.2-py3-none-any.whl.metadata (3.2 kB)
Collecting llvmlite<0.45,>=0.44.0dev0 (from numba>=0.51.0->librosa==0.10.0)
  Downloading llvmlite-0.44.0-cp310-cp310-win_amd64.whl.metadata (5.0 kB)
Collecting numpy>=1.20.3 (from librosa==0.10.0)
  Downloading numpy-2.1.3-cp310-cp310-win_amd64.whl.metadata (60 kB)
Collecting platformdirs>=2.5.0 (from pooch>=1.0->librosa==0.10.0)
  Downloading platformdirs-4.3.6-py3-none-any.whl.metadata (11 kB)
Collecting requests>=2.19.0 (from pooch>=1.0->librosa==0.10.0)
  Downloading requests-2.32.3-py3-none-any.whl.metadata (4.6 kB)
Collecting threadpoolctl>=3.1.0 (from scikit-learn>=0.20.0->librosa==0.10.0)
  Downloading threadpoolctl-3.5.0-py3-none-any.whl.metadata (13 kB)
Collecting cffi>=1.0 (from soundfile>=0.12.1->librosa==0.10.0)
  Downloading cffi-1.17.1-cp310-cp310-win_amd64.whl.metadata (1.6 kB)
Collecting pycparser (from cffi>=1.0->soundfile>=0.12.1->librosa==0.10.0)
  Downloading pycparser-2.22-py3-none-any.whl.metadata (943 bytes)
Collecting charset-normalizer<4,>=2 (from requests>=2.19.0->pooch>=1.0->librosa==0.10.0)
  Downloading charset_normalizer-3.4.1-cp310-cp310-win_amd64.whl.metadata (36 kB)
Collecting idna<4,>=2.5 (from requests>=2.19.0->pooch>=1.0->librosa==0.10.0)
  Downloading idna-3.10-py3-none-any.whl.metadata (10 kB)
Collecting urllib3<3,>=1.21.1 (from requests>=2.19.0->pooch>=1.0->librosa==0.10.0)
  Downloading urllib3-2.3.0-py3-none-any.whl.metadata (6.5 kB)
Collecting certifi>=2017.4.17 (from requests>=2.19.0->pooch>=1.0->librosa==0.10.0)
  Downloading certifi-2025.1.31-py3-none-any.whl.metadata (2.5 kB)
Downloading librosa-0.10.0-py3-none-any.whl (252 kB)
Downloading audioread-3.0.1-py3-none-any.whl (23 kB)
Downloading decorator-5.2.1-py3-none-any.whl (9.2 kB)
Downloading joblib-1.4.2-py3-none-any.whl (301 kB)
Downloading lazy_loader-0.4-py3-none-any.whl (12 kB)
Downloading msgpack-1.1.0-cp310-cp310-win_amd64.whl (74 kB)
Downloading numba-0.61.0-cp310-cp310-win_amd64.whl (2.8 MB)
   ---------------------------------------- 2.8/2.8 MB 9.6 MB/s eta 0:00:00
Downloading numpy-2.1.3-cp310-cp310-win_amd64.whl (12.9 MB)
   ---------------------------------------- 12.9/12.9 MB 10.5 MB/s eta 0:00:00
Downloading pooch-1.8.2-py3-none-any.whl (64 kB)
Downloading scikit_learn-1.6.1-cp310-cp310-win_amd64.whl (11.1 MB)
   ---------------------------------------- 11.1/11.1 MB 10.9 MB/s eta 0:00:00
Downloading scipy-1.15.2-cp310-cp310-win_amd64.whl (41.2 MB)
   ---------------------------------------- 41.2/41.2 MB 11.1 MB/s eta 0:00:00
Downloading soundfile-0.13.1-py2.py3-none-win_amd64.whl (1.0 MB)
   ---------------------------------------- 1.0/1.0 MB 12.0 MB/s eta 0:00:00
Downloading soxr-0.5.0.post1-cp310-cp310-win_amd64.whl (166 kB)
Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)
Downloading cffi-1.17.1-cp310-cp310-win_amd64.whl (181 kB)
Downloading llvmlite-0.44.0-cp310-cp310-win_amd64.whl (30.3 MB)
   ---------------------------------------- 30.3/30.3 MB 11.1 MB/s eta 0:00:00
Downloading packaging-24.2-py3-none-any.whl (65 kB)
Downloading platformdirs-4.3.6-py3-none-any.whl (18 kB)
Downloading requests-2.32.3-py3-none-any.whl (64 kB)
Downloading threadpoolctl-3.5.0-py3-none-any.whl (18 kB)
Downloading certifi-2025.1.31-py3-none-any.whl (166 kB)
Downloading charset_normalizer-3.4.1-cp310-cp310-win_amd64.whl (102 kB)
Downloading idna-3.10-py3-none-any.whl (70 kB)
Downloading urllib3-2.3.0-py3-none-any.whl (128 kB)
Downloading pycparser-2.22-py3-none-any.whl (117 kB)
Installing collected packages: urllib3, typing-extensions, threadpoolctl, pycparser, platformdirs, packaging, numpy, msgpack, llvmlite, joblib, idna, decorator, charset-normalizer, certifi, audioread, soxr, scipy, requests, numba, lazy-loader, cffi, soundfile, scikit-learn, pooch, librosa
  Attempting uninstall: numpy
    Found existing installation: numpy 1.22.0
    Uninstalling numpy-1.22.0:
      Successfully uninstalled numpy-1.22.0
Successfully installed audioread-3.0.1 certifi-2025.1.31 cffi-1.17.1 charset-normalizer-3.4.1 decorator-5.2.1 idna-3.10 joblib-1.4.2 lazy-loader-0.4 librosa-0.10.0 llvmlite-0.44.0 msgpack-1.1.0 numba-0.61.0 numpy-2.1.3 packaging-24.2 platformdirs-4.3.6 pooch-1.8.2 pycparser-2.22 requests-2.32.3 scikit-learn-1.6.1 scipy-1.15.2 soundfile-0.13.1 soxr-0.5.0.post1 threadpoolctl-3.5.0 typing-extensions-4.12.2 urllib3-2.3.0
[27-02-25 15:31:56,20] [COMMAND] Installation librosa - Fin d'exécution (code: 0) 
[27-02-25 15:31:56,21] [COMMAND] Installation soundfile - Début d'exécution 
Collecting soundfile==0.12.1
  Downloading soundfile-0.12.1-py2.py3-none-win_amd64.whl.metadata (14 kB)
Requirement already satisfied: cffi>=1.0 in c:\users\jf30lb\projects\python\projects\text_to_audio\venv_py310\lib\site-packages (from soundfile==0.12.1) (1.17.1)
Requirement already satisfied: pycparser in c:\users\jf30lb\projects\python\projects\text_to_audio\venv_py310\lib\site-packages (from cffi>=1.0->soundfile==0.12.1) (2.22)
Downloading soundfile-0.12.1-py2.py3-none-win_amd64.whl (1.0 MB)
   ---------------------------------------- 1.0/1.0 MB 6.9 MB/s eta 0:00:00
Installing collected packages: soundfile
  Attempting uninstall: soundfile
    Found existing installation: soundfile 0.13.1
    Uninstalling soundfile-0.13.1:
      Successfully uninstalled soundfile-0.13.1
Successfully installed soundfile-0.12.1
[27-02-25 15:31:58,27] [COMMAND] Installation soundfile - Fin d'exécution (code: 0) 
[27-02-25 15:31:58,29] [COMMAND] Installation Unidecode - Début d'exécution 
Collecting Unidecode==1.3.7
  Downloading Unidecode-1.3.7-py3-none-any.whl.metadata (13 kB)
Downloading Unidecode-1.3.7-py3-none-any.whl (235 kB)
Installing collected packages: Unidecode
Successfully installed Unidecode-1.3.7
[27-02-25 15:32:02,79] [COMMAND] Installation Unidecode - Fin d'exécution (code: 0) 
[27-02-25 15:32:02,81] [COMMAND] Installation tqdm - Début d'exécution 
Collecting tqdm
  Downloading tqdm-4.67.1-py3-none-any.whl.metadata (57 kB)
Collecting colorama (from tqdm)
  Downloading colorama-0.4.6-py2.py3-none-any.whl.metadata (17 kB)
Downloading tqdm-4.67.1-py3-none-any.whl (78 kB)
Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)
Installing collected packages: colorama, tqdm
Successfully installed colorama-0.4.6 tqdm-4.67.1
[27-02-25 15:32:05,13] [COMMAND] Installation tqdm - Fin d'exécution (code: 0) 
[27-02-25 15:32:05,16] [INFO] Installation de TTS... 
[27-02-25 15:32:05,18] [COMMAND] Désinstallation TTS - Début d'exécution 
WARNING: Skipping TTS as it is not installed.
[27-02-25 15:32:05,83] [COMMAND] Désinstallation TTS - Fin d'exécution (code: 0) 
[27-02-25 15:32:05,87] [INFO] Tentative d'installation de TTS version 0.15.2... 
[27-02-25 15:32:05,89] [COMMAND] Installation TTS 0.15.2 - Début d'exécution 
ERROR: Could not find a version that satisfies the requirement TTS==0.15.2 (from versions: none)
ERROR: No matching distribution found for TTS==0.15.2
[27-02-25 15:32:07,03] [COMMAND] Installation TTS 0.15.2 - Fin d'exécution (code: 1) 
[27-02-25 15:32:07,04] [ERROR] Erreur lors de l'exécution de la commande: Installation TTS 0.15.2 (code: 1) 
[27-02-25 15:32:07,08] [WARNING] Échec de l'installation de TTS 0.15.2, tentative avec la version 0.17.6... 
[27-02-25 15:32:07,23] [COMMAND] Installation TTS 0.17.6 - Début d'exécution 
ERROR: Could not find a version that satisfies the requirement TTS==0.17.6 (from versions: none)
ERROR: No matching distribution found for TTS==0.17.6
[27-02-25 15:32:08,28] [COMMAND] Installation TTS 0.17.6 - Fin d'exécution (code: 1) 
[27-02-25 15:32:08,31] [ERROR] Erreur lors de l'exécution de la commande: Installation TTS 0.17.6 (code: 1) 
[27-02-25 15:32:08,33] [WARNING] Échec de l'installation de TTS 0.17.6, tentative avec la dernière version... 
[27-02-25 15:32:08,35] [COMMAND] Installation TTS dernière version - Début d'exécution 
Collecting TTS
  Downloading TTS-0.22.0.tar.gz (1.7 MB)
     ---------------------------------------- 1.7/1.7 MB 8.9 MB/s eta 0:00:00
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Building wheels for collected packages: TTS
  Building wheel for TTS (pyproject.toml): started
  Building wheel for TTS (pyproject.toml): finished with status 'error'
  error: subprocess-exited-with-error
  
  Building wheel for TTS (pyproject.toml) did not run successfully.
  exit code: 1
  
  [2645 lines of output]
  running bdist_wheel
  running build
  running build_py
  creating temp_build\TTS
  copying TTS\api.py -> temp_build\TTS
  copying TTS\model.py -> temp_build\TTS
  copying TTS\__init__.py -> temp_build\TTS
  running egg_info
  writing TTS.egg-info\PKG-INFO
  writing dependency_links to TTS.egg-info\dependency_links.txt
  writing entry points to TTS.egg-info\entry_points.txt
  writing requirements to TTS.egg-info\requires.txt
  writing top-level names to TTS.egg-info\top_level.txt
  reading manifest file 'TTS.egg-info\SOURCES.txt'
  reading manifest template 'MANIFEST.in'
  warning: no previously-included files matching '*' found under directory 'tests'
  no previously-included directories found matching 'tests*'
  adding license file 'LICENSE.txt'
  writing manifest file 'TTS.egg-info\SOURCES.txt'
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.monotonic_align' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.monotonic_align' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.monotonic_align' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.monotonic_align' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.monotonic_align' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.bin' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.bin' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.bin' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.bin' to be distributed and are
          already explicitly excluding 'TTS.bin' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.config' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.config' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.config' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.config' to be distributed and are
          already explicitly excluding 'TTS.config' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.demos.xtts_ft_demo' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.demos.xtts_ft_demo' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.demos.xtts_ft_demo' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.demos.xtts_ft_demo' to be distributed and are
          already explicitly excluding 'TTS.demos.xtts_ft_demo' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.demos.xtts_ft_demo.utils' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.demos.xtts_ft_demo.utils' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.demos.xtts_ft_demo.utils' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.demos.xtts_ft_demo.utils' to be distributed and are
          already explicitly excluding 'TTS.demos.xtts_ft_demo.utils' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.encoder' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.encoder' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.encoder' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.encoder' to be distributed and are
          already explicitly excluding 'TTS.encoder' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.encoder.configs' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.encoder.configs' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.encoder.configs' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.encoder.configs' to be distributed and are
          already explicitly excluding 'TTS.encoder.configs' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.encoder.models' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.encoder.models' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.encoder.models' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.encoder.models' to be distributed and are
          already explicitly excluding 'TTS.encoder.models' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.encoder.utils' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.encoder.utils' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.encoder.utils' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.encoder.utils' to be distributed and are
          already explicitly excluding 'TTS.encoder.utils' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.server' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.server' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.server' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.server' to be distributed and are
          already explicitly excluding 'TTS.server' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.server.static' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.server.static' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.server.static' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.server.static' to be distributed and are
          already explicitly excluding 'TTS.server.static' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.server.templates' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.server.templates' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.server.templates' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.server.templates' to be distributed and are
          already explicitly excluding 'TTS.server.templates' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts' to be distributed and are
          already explicitly excluding 'TTS.tts' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.configs' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.configs' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.configs' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.configs' to be distributed and are
          already explicitly excluding 'TTS.tts.configs' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.datasets' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.datasets' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.datasets' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.datasets' to be distributed and are
          already explicitly excluding 'TTS.tts.datasets' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers' to be distributed and are
          already explicitly excluding 'TTS.tts.layers' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.align_tts' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.align_tts' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.align_tts' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.align_tts' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.align_tts' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.bark' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.bark' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.bark' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.bark' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.bark' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.bark.hubert' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.bark.hubert' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.bark.hubert' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.bark.hubert' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.bark.hubert' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.delightful_tts' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.delightful_tts' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.delightful_tts' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.delightful_tts' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.delightful_tts' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.feed_forward' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.feed_forward' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.feed_forward' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.feed_forward' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.feed_forward' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.generic' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.generic' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.generic' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.generic' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.generic' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.glow_tts' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.glow_tts' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.glow_tts' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.glow_tts' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.glow_tts' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.overflow' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.overflow' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.overflow' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.overflow' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.overflow' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.tacotron' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.tacotron' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.tacotron' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.tacotron' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.tacotron' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.tortoise' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.tortoise' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.tortoise' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.tortoise' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.tortoise' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.vits' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.vits' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.vits' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.vits' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.vits' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.xtts' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.xtts' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.xtts' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.xtts' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.xtts' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.layers.xtts.trainer' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.layers.xtts.trainer' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.layers.xtts.trainer' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.layers.xtts.trainer' to be distributed and are
          already explicitly excluding 'TTS.tts.layers.xtts.trainer' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.models' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.models' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.models' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.models' to be distributed and are
          already explicitly excluding 'TTS.tts.models' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils' to be distributed and are
          already explicitly excluding 'TTS.tts.utils' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.assets.tortoise' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.assets.tortoise' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.assets.tortoise' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.assets.tortoise' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.assets.tortoise' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.bangla' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.bangla' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.bangla' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.bangla' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.bangla' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.belarusian' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.belarusian' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.belarusian' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.belarusian' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.belarusian' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.chinese_mandarin' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.chinese_mandarin' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.chinese_mandarin' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.chinese_mandarin' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.chinese_mandarin' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.english' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.english' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.english' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.english' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.english' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.french' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.french' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.french' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.french' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.french' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.japanese' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.japanese' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.japanese' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.japanese' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.japanese' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.korean' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.korean' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.korean' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.korean' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.korean' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.tts.utils.text.phonemizers' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.tts.utils.text.phonemizers' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.tts.utils.text.phonemizers' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.tts.utils.text.phonemizers' to be distributed and are
          already explicitly excluding 'TTS.tts.utils.text.phonemizers' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.utils' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.utils' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.utils' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.utils' to be distributed and are
          already explicitly excluding 'TTS.utils' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.utils.audio' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.utils.audio' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.utils.audio' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.utils.audio' to be distributed and are
          already explicitly excluding 'TTS.utils.audio' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.configs' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.configs' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.configs' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.configs' to be distributed and are
          already explicitly excluding 'TTS.vc.configs' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.models' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.models' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.models' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.models' to be distributed and are
          already explicitly excluding 'TTS.vc.models' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.modules' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.modules' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.modules' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.modules' to be distributed and are
          already explicitly excluding 'TTS.vc.modules' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.modules.freevc' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.modules.freevc' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.modules.freevc' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.modules.freevc' to be distributed and are
          already explicitly excluding 'TTS.vc.modules.freevc' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.modules.freevc.speaker_encoder' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.modules.freevc.speaker_encoder' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.modules.freevc.speaker_encoder' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.modules.freevc.speaker_encoder' to be distributed and are
          already explicitly excluding 'TTS.vc.modules.freevc.speaker_encoder' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vc.modules.freevc.wavlm' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vc.modules.freevc.wavlm' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vc.modules.freevc.wavlm' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vc.modules.freevc.wavlm' to be distributed and are
          already explicitly excluding 'TTS.vc.modules.freevc.wavlm' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder' to be distributed and are
          already explicitly excluding 'TTS.vocoder' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder.configs' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder.configs' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder.configs' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder.configs' to be distributed and are
          already explicitly excluding 'TTS.vocoder.configs' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder.datasets' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder.datasets' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder.datasets' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder.datasets' to be distributed and are
          already explicitly excluding 'TTS.vocoder.datasets' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder.layers' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder.layers' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder.layers' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder.layers' to be distributed and are
          already explicitly excluding 'TTS.vocoder.layers' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder.models' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder.models' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder.models' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder.models' to be distributed and are
          already explicitly excluding 'TTS.vocoder.models' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\setuptools\command\build_py.py:212: _Warning: Package 'TTS.vocoder.utils' is absent from the `packages` configuration.
  !!
  
          ********************************************************************************
          ############################
          # Package would be ignored #
          ############################
          Python recognizes 'TTS.vocoder.utils' as an importable package[^1],
          but it is absent from setuptools' `packages` configuration.
  
          This leads to an ambiguous overall configuration. If you want to distribute this
          package, please make sure that 'TTS.vocoder.utils' is explicitly added
          to the `packages` configuration field.
  
          Alternatively, you can also rely on setuptools' discovery methods
          (for example by using `find_namespace_packages(...)`/`find_namespace:`
          instead of `find_packages(...)`/`find:`).
  
          You can read more about "package discovery" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
  
          If you don't want 'TTS.vocoder.utils' to be distributed and are
          already explicitly excluding 'TTS.vocoder.utils' via
          `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,
          you can try to use `exclude_package_data`, or `include-package-data=False` in
          combination with a more fine grained `package-data` configuration.
  
          You can read more about "package data files" on setuptools documentation page:
  
          - https://setuptools.pypa.io/en/latest/userguide/datafiles.html
  
  
          [^1]: For Python, any directory (with suitable naming) can be imported,
                even if it does not contain any `.py` files.
                On the other hand, currently there is no concept of package data
                directory, all directories are treated like packages.
          ********************************************************************************
  
  !!
    check.warn(importable)
  copying TTS\.models.json -> temp_build\TTS
  copying TTS\VERSION -> temp_build\TTS
  creating temp_build\TTS\tts\utils\monotonic_align
  copying TTS\tts\utils\monotonic_align\core.c -> temp_build\TTS\tts\utils\monotonic_align
  creating temp_build\TTS\bin
  copying TTS\bin\__init__.py -> temp_build\TTS\bin
  copying TTS\bin\collect_env_info.py -> temp_build\TTS\bin
  copying TTS\bin\compute_attention_masks.py -> temp_build\TTS\bin
  copying TTS\bin\compute_embeddings.py -> temp_build\TTS\bin
  copying TTS\bin\compute_statistics.py -> temp_build\TTS\bin
  copying TTS\bin\eval_encoder.py -> temp_build\TTS\bin
  copying TTS\bin\extract_tts_spectrograms.py -> temp_build\TTS\bin
  copying TTS\bin\find_unique_chars.py -> temp_build\TTS\bin
  copying TTS\bin\find_unique_phonemes.py -> temp_build\TTS\bin
  copying TTS\bin\remove_silence_using_vad.py -> temp_build\TTS\bin
  copying TTS\bin\resample.py -> temp_build\TTS\bin
  copying TTS\bin\synthesize.py -> temp_build\TTS\bin
  copying TTS\bin\train_encoder.py -> temp_build\TTS\bin
  copying TTS\bin\train_tts.py -> temp_build\TTS\bin
  copying TTS\bin\train_vocoder.py -> temp_build\TTS\bin
  copying TTS\bin\tune_wavegrad.py -> temp_build\TTS\bin
  creating temp_build\TTS\config
  copying TTS\config\__init__.py -> temp_build\TTS\config
  copying TTS\config\shared_configs.py -> temp_build\TTS\config
  creating temp_build\TTS\demos\xtts_ft_demo
  copying TTS\demos\xtts_ft_demo\xtts_demo.py -> temp_build\TTS\demos\xtts_ft_demo
  creating temp_build\TTS\demos\xtts_ft_demo\utils
  copying TTS\demos\xtts_ft_demo\utils\formatter.py -> temp_build\TTS\demos\xtts_ft_demo\utils
  copying TTS\demos\xtts_ft_demo\utils\gpt_train.py -> temp_build\TTS\demos\xtts_ft_demo\utils
  creating temp_build\TTS\encoder
  copying TTS\encoder\README.md -> temp_build\TTS\encoder
  copying TTS\encoder\__init__.py -> temp_build\TTS\encoder
  copying TTS\encoder\dataset.py -> temp_build\TTS\encoder
  copying TTS\encoder\losses.py -> temp_build\TTS\encoder
  creating temp_build\TTS\encoder\configs
  copying TTS\encoder\configs\base_encoder_config.py -> temp_build\TTS\encoder\configs
  copying TTS\encoder\configs\emotion_encoder_config.py -> temp_build\TTS\encoder\configs
  copying TTS\encoder\configs\speaker_encoder_config.py -> temp_build\TTS\encoder\configs
  creating temp_build\TTS\encoder\models
  copying TTS\encoder\models\base_encoder.py -> temp_build\TTS\encoder\models
  copying TTS\encoder\models\lstm.py -> temp_build\TTS\encoder\models
  copying TTS\encoder\models\resnet.py -> temp_build\TTS\encoder\models
  creating temp_build\TTS\encoder\utils
  copying TTS\encoder\utils\__init__.py -> temp_build\TTS\encoder\utils
  copying TTS\encoder\utils\generic_utils.py -> temp_build\TTS\encoder\utils
  copying TTS\encoder\utils\prepare_voxceleb.py -> temp_build\TTS\encoder\utils
  copying TTS\encoder\utils\training.py -> temp_build\TTS\encoder\utils
  copying TTS\encoder\utils\visual.py -> temp_build\TTS\encoder\utils
  creating temp_build\TTS\server
  copying TTS\server\README.md -> temp_build\TTS\server
  copying TTS\server\__init__.py -> temp_build\TTS\server
  copying TTS\server\conf.json -> temp_build\TTS\server
  copying TTS\server\server.py -> temp_build\TTS\server
  creating temp_build\TTS\server\static
  copying TTS\server\static\coqui-log-green-TTS.png -> temp_build\TTS\server\static
  creating temp_build\TTS\server\templates
  copying TTS\server\templates\details.html -> temp_build\TTS\server\templates
  copying TTS\server\templates\index.html -> temp_build\TTS\server\templates
  copying TTS\tts\__init__.py -> temp_build\TTS\tts
  creating temp_build\TTS\tts\configs
  copying TTS\tts\configs\__init__.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\align_tts_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\bark_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\delightful_tts_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\fast_pitch_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\fast_speech_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\fastspeech2_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\glow_tts_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\neuralhmm_tts_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\overflow_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\shared_configs.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\speedy_speech_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\tacotron2_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\tacotron_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\tortoise_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\vits_config.py -> temp_build\TTS\tts\configs
  copying TTS\tts\configs\xtts_config.py -> temp_build\TTS\tts\configs
  creating temp_build\TTS\tts\datasets
  copying TTS\tts\datasets\__init__.py -> temp_build\TTS\tts\datasets
  copying TTS\tts\datasets\dataset.py -> temp_build\TTS\tts\datasets
  copying TTS\tts\datasets\formatters.py -> temp_build\TTS\tts\datasets
  creating temp_build\TTS\tts\layers
  copying TTS\tts\layers\__init__.py -> temp_build\TTS\tts\layers
  copying TTS\tts\layers\losses.py -> temp_build\TTS\tts\layers
  creating temp_build\TTS\tts\layers\align_tts
  copying TTS\tts\layers\align_tts\__init__.py -> temp_build\TTS\tts\layers\align_tts
  copying TTS\tts\layers\align_tts\duration_predictor.py -> temp_build\TTS\tts\layers\align_tts
  copying TTS\tts\layers\align_tts\mdn.py -> temp_build\TTS\tts\layers\align_tts
  creating temp_build\TTS\tts\layers\bark
  copying TTS\tts\layers\bark\__init__.py -> temp_build\TTS\tts\layers\bark
  copying TTS\tts\layers\bark\inference_funcs.py -> temp_build\TTS\tts\layers\bark
  copying TTS\tts\layers\bark\load_model.py -> temp_build\TTS\tts\layers\bark
  copying TTS\tts\layers\bark\model.py -> temp_build\TTS\tts\layers\bark
  copying TTS\tts\layers\bark\model_fine.py -> temp_build\TTS\tts\layers\bark
  creating temp_build\TTS\tts\layers\bark\hubert
  copying TTS\tts\layers\bark\hubert\__init__.py -> temp_build\TTS\tts\layers\bark\hubert
  copying TTS\tts\layers\bark\hubert\hubert_manager.py -> temp_build\TTS\tts\layers\bark\hubert
  copying TTS\tts\layers\bark\hubert\kmeans_hubert.py -> temp_build\TTS\tts\layers\bark\hubert
  copying TTS\tts\layers\bark\hubert\tokenizer.py -> temp_build\TTS\tts\layers\bark\hubert
  creating temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\__init__.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\acoustic_model.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\conformer.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\conv_layers.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\encoders.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\energy_adaptor.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\kernel_predictor.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\networks.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\phoneme_prosody_predictor.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\pitch_adaptor.py -> temp_build\TTS\tts\layers\delightful_tts
  copying TTS\tts\layers\delightful_tts\variance_predictor.py -> temp_build\TTS\tts\layers\delightful_tts
  creating temp_build\TTS\tts\layers\feed_forward
  copying TTS\tts\layers\feed_forward\__init__.py -> temp_build\TTS\tts\layers\feed_forward
  copying TTS\tts\layers\feed_forward\decoder.py -> temp_build\TTS\tts\layers\feed_forward
  copying TTS\tts\layers\feed_forward\duration_predictor.py -> temp_build\TTS\tts\layers\feed_forward
  copying TTS\tts\layers\feed_forward\encoder.py -> temp_build\TTS\tts\layers\feed_forward
  creating temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\__init__.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\aligner.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\gated_conv.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\normalization.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\pos_encoding.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\res_conv_bn.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\time_depth_sep_conv.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\transformer.py -> temp_build\TTS\tts\layers\generic
  copying TTS\tts\layers\generic\wavenet.py -> temp_build\TTS\tts\layers\generic
  creating temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\__init__.py -> temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\decoder.py -> temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\duration_predictor.py -> temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\encoder.py -> temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\glow.py -> temp_build\TTS\tts\layers\glow_tts
  copying TTS\tts\layers\glow_tts\transformer.py -> temp_build\TTS\tts\layers\glow_tts
  creating temp_build\TTS\tts\layers\overflow
  copying TTS\tts\layers\overflow\__init__.py -> temp_build\TTS\tts\layers\overflow
  copying TTS\tts\layers\overflow\common_layers.py -> temp_build\TTS\tts\layers\overflow
  copying TTS\tts\layers\overflow\decoder.py -> temp_build\TTS\tts\layers\overflow
  copying TTS\tts\layers\overflow\neural_hmm.py -> temp_build\TTS\tts\layers\overflow
  copying TTS\tts\layers\overflow\plotting_utils.py -> temp_build\TTS\tts\layers\overflow
  creating temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\__init__.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\attentions.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\capacitron_layers.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\common_layers.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\gst_layers.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\tacotron.py -> temp_build\TTS\tts\layers\tacotron
  copying TTS\tts\layers\tacotron\tacotron2.py -> temp_build\TTS\tts\layers\tacotron
  creating temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\arch_utils.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\audio_utils.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\autoregressive.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\classifier.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\clvp.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\diffusion.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\diffusion_decoder.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\dpm_solver.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\random_latent_generator.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\tokenizer.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\transformer.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\utils.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\vocoder.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\wav2vec_alignment.py -> temp_build\TTS\tts\layers\tortoise
  copying TTS\tts\layers\tortoise\xtransformers.py -> temp_build\TTS\tts\layers\tortoise
  creating temp_build\TTS\tts\layers\vits
  copying TTS\tts\layers\vits\discriminator.py -> temp_build\TTS\tts\layers\vits
  copying TTS\tts\layers\vits\networks.py -> temp_build\TTS\tts\layers\vits
  copying TTS\tts\layers\vits\stochastic_duration_predictor.py -> temp_build\TTS\tts\layers\vits
  copying TTS\tts\layers\vits\transforms.py -> temp_build\TTS\tts\layers\vits
  creating temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\dvae.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\gpt.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\gpt_inference.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\hifigan_decoder.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\latent_encoder.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\perceiver_encoder.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\stream_generator.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\tokenizer.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\xtts_manager.py -> temp_build\TTS\tts\layers\xtts
  copying TTS\tts\layers\xtts\zh_num2words.py -> temp_build\TTS\tts\layers\xtts
  creating temp_build\TTS\tts\layers\xtts\trainer
  copying TTS\tts\layers\xtts\trainer\dataset.py -> temp_build\TTS\tts\layers\xtts\trainer
  copying TTS\tts\layers\xtts\trainer\gpt_trainer.py -> temp_build\TTS\tts\layers\xtts\trainer
  creating temp_build\TTS\tts\models
  copying TTS\tts\models\__init__.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\align_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\bark.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\base_tacotron.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\base_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\delightful_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\forward_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\glow_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\neuralhmm_tts.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\overflow.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\tacotron.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\tacotron2.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\tortoise.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\vits.py -> temp_build\TTS\tts\models
  copying TTS\tts\models\xtts.py -> temp_build\TTS\tts\models
  copying TTS\tts\utils\__init__.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\data.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\fairseq.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\helpers.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\languages.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\managers.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\measures.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\speakers.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\ssim.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\synthesis.py -> temp_build\TTS\tts\utils
  copying TTS\tts\utils\visual.py -> temp_build\TTS\tts\utils
  creating temp_build\TTS\tts\utils\assets\tortoise
  copying TTS\tts\utils\assets\tortoise\tokenizer.json -> temp_build\TTS\tts\utils\assets\tortoise
  copying TTS\tts\utils\monotonic_align\__init__.py -> temp_build\TTS\tts\utils\monotonic_align
  copying TTS\tts\utils\monotonic_align\core.c -> temp_build\TTS\tts\utils\monotonic_align
  copying TTS\tts\utils\monotonic_align\core.pyx -> temp_build\TTS\tts\utils\monotonic_align
  copying TTS\tts\utils\monotonic_align\setup.py -> temp_build\TTS\tts\utils\monotonic_align
  creating temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\__init__.py -> temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\characters.py -> temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\cleaners.py -> temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\cmudict.py -> temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\punctuation.py -> temp_build\TTS\tts\utils\text
  copying TTS\tts\utils\text\tokenizer.py -> temp_build\TTS\tts\utils\text
  creating temp_build\TTS\tts\utils\text\bangla
  copying TTS\tts\utils\text\bangla\__init__.py -> temp_build\TTS\tts\utils\text\bangla
  copying TTS\tts\utils\text\bangla\phonemizer.py -> temp_build\TTS\tts\utils\text\bangla
  creating temp_build\TTS\tts\utils\text\belarusian
  copying TTS\tts\utils\text\belarusian\__init__.py -> temp_build\TTS\tts\utils\text\belarusian
  copying TTS\tts\utils\text\belarusian\phonemizer.py -> temp_build\TTS\tts\utils\text\belarusian
  creating temp_build\TTS\tts\utils\text\chinese_mandarin
  copying TTS\tts\utils\text\chinese_mandarin\__init__.py -> temp_build\TTS\tts\utils\text\chinese_mandarin
  copying TTS\tts\utils\text\chinese_mandarin\numbers.py -> temp_build\TTS\tts\utils\text\chinese_mandarin
  copying TTS\tts\utils\text\chinese_mandarin\phonemizer.py -> temp_build\TTS\tts\utils\text\chinese_mandarin
  copying TTS\tts\utils\text\chinese_mandarin\pinyinToPhonemes.py -> temp_build\TTS\tts\utils\text\chinese_mandarin
  creating temp_build\TTS\tts\utils\text\english
  copying TTS\tts\utils\text\english\__init__.py -> temp_build\TTS\tts\utils\text\english
  copying TTS\tts\utils\text\english\abbreviations.py -> temp_build\TTS\tts\utils\text\english
  copying TTS\tts\utils\text\english\number_norm.py -> temp_build\TTS\tts\utils\text\english
  copying TTS\tts\utils\text\english\time_norm.py -> temp_build\TTS\tts\utils\text\english
  creating temp_build\TTS\tts\utils\text\french
  copying TTS\tts\utils\text\french\__init__.py -> temp_build\TTS\tts\utils\text\french
  copying TTS\tts\utils\text\french\abbreviations.py -> temp_build\TTS\tts\utils\text\french
  creating temp_build\TTS\tts\utils\text\japanese
  copying TTS\tts\utils\text\japanese\__init__.py -> temp_build\TTS\tts\utils\text\japanese
  copying TTS\tts\utils\text\japanese\phonemizer.py -> temp_build\TTS\tts\utils\text\japanese
  creating temp_build\TTS\tts\utils\text\korean
  copying TTS\tts\utils\text\korean\__init__.py -> temp_build\TTS\tts\utils\text\korean
  copying TTS\tts\utils\text\korean\ko_dictionary.py -> temp_build\TTS\tts\utils\text\korean
  copying TTS\tts\utils\text\korean\korean.py -> temp_build\TTS\tts\utils\text\korean
  copying TTS\tts\utils\text\korean\phonemizer.py -> temp_build\TTS\tts\utils\text\korean
  creating temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\__init__.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\bangla_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\base.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\belarusian_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\espeak_wrapper.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\gruut_wrapper.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\ja_jp_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\ko_kr_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\multi_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  copying TTS\tts\utils\text\phonemizers\zh_cn_phonemizer.py -> temp_build\TTS\tts\utils\text\phonemizers
  creating temp_build\TTS\utils
  copying TTS\utils\__init__.py -> temp_build\TTS\utils
  copying TTS\utils\callbacks.py -> temp_build\TTS\utils
  copying TTS\utils\capacitron_optimizer.py -> temp_build\TTS\utils
  copying TTS\utils\distribute.py -> temp_build\TTS\utils
  copying TTS\utils\download.py -> temp_build\TTS\utils
  copying TTS\utils\downloaders.py -> temp_build\TTS\utils
  copying TTS\utils\generic_utils.py -> temp_build\TTS\utils
  copying TTS\utils\io.py -> temp_build\TTS\utils
  copying TTS\utils\manage.py -> temp_build\TTS\utils
  copying TTS\utils\radam.py -> temp_build\TTS\utils
  copying TTS\utils\samplers.py -> temp_build\TTS\utils
  copying TTS\utils\synthesizer.py -> temp_build\TTS\utils
  copying TTS\utils\training.py -> temp_build\TTS\utils
  copying TTS\utils\vad.py -> temp_build\TTS\utils
  creating temp_build\TTS\utils\audio
  copying TTS\utils\audio\__init__.py -> temp_build\TTS\utils\audio
  copying TTS\utils\audio\numpy_transforms.py -> temp_build\TTS\utils\audio
  copying TTS\utils\audio\processor.py -> temp_build\TTS\utils\audio
  copying TTS\utils\audio\torch_transforms.py -> temp_build\TTS\utils\audio
  creating temp_build\TTS\vc\configs
  copying TTS\vc\configs\__init__.py -> temp_build\TTS\vc\configs
  copying TTS\vc\configs\freevc_config.py -> temp_build\TTS\vc\configs
  copying TTS\vc\configs\shared_configs.py -> temp_build\TTS\vc\configs
  creating temp_build\TTS\vc\models
  copying TTS\vc\models\__init__.py -> temp_build\TTS\vc\models
  copying TTS\vc\models\base_vc.py -> temp_build\TTS\vc\models
  copying TTS\vc\models\freevc.py -> temp_build\TTS\vc\models
  creating temp_build\TTS\vc\modules
  copying TTS\vc\modules\__init__.py -> temp_build\TTS\vc\modules
  creating temp_build\TTS\vc\modules\freevc
  copying TTS\vc\modules\freevc\__init__.py -> temp_build\TTS\vc\modules\freevc
  copying TTS\vc\modules\freevc\commons.py -> temp_build\TTS\vc\modules\freevc
  copying TTS\vc\modules\freevc\mel_processing.py -> temp_build\TTS\vc\modules\freevc
  copying TTS\vc\modules\freevc\modules.py -> temp_build\TTS\vc\modules\freevc
  creating temp_build\TTS\vc\modules\freevc\speaker_encoder
  copying TTS\vc\modules\freevc\speaker_encoder\__init__.py -> temp_build\TTS\vc\modules\freevc\speaker_encoder
  copying TTS\vc\modules\freevc\speaker_encoder\audio.py -> temp_build\TTS\vc\modules\freevc\speaker_encoder
  copying TTS\vc\modules\freevc\speaker_encoder\hparams.py -> temp_build\TTS\vc\modules\freevc\speaker_encoder
  copying TTS\vc\modules\freevc\speaker_encoder\speaker_encoder.py -> temp_build\TTS\vc\modules\freevc\speaker_encoder
  creating temp_build\TTS\vc\modules\freevc\wavlm
  copying TTS\vc\modules\freevc\wavlm\__init__.py -> temp_build\TTS\vc\modules\freevc\wavlm
  copying TTS\vc\modules\freevc\wavlm\config.json -> temp_build\TTS\vc\modules\freevc\wavlm
  copying TTS\vc\modules\freevc\wavlm\modules.py -> temp_build\TTS\vc\modules\freevc\wavlm
  copying TTS\vc\modules\freevc\wavlm\wavlm.py -> temp_build\TTS\vc\modules\freevc\wavlm
  creating temp_build\TTS\vocoder
  copying TTS\vocoder\README.md -> temp_build\TTS\vocoder
  copying TTS\vocoder\__init__.py -> temp_build\TTS\vocoder
  creating temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\__init__.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\fullband_melgan_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\hifigan_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\melgan_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\multiband_melgan_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\parallel_wavegan_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\shared_configs.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\univnet_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\wavegrad_config.py -> temp_build\TTS\vocoder\configs
  copying TTS\vocoder\configs\wavernn_config.py -> temp_build\TTS\vocoder\configs
  creating temp_build\TTS\vocoder\datasets
  copying TTS\vocoder\datasets\__init__.py -> temp_build\TTS\vocoder\datasets
  copying TTS\vocoder\datasets\gan_dataset.py -> temp_build\TTS\vocoder\datasets
  copying TTS\vocoder\datasets\preprocess.py -> temp_build\TTS\vocoder\datasets
  copying TTS\vocoder\datasets\wavegrad_dataset.py -> temp_build\TTS\vocoder\datasets
  copying TTS\vocoder\datasets\wavernn_dataset.py -> temp_build\TTS\vocoder\datasets
  creating temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\__init__.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\hifigan.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\losses.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\lvc_block.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\melgan.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\parallel_wavegan.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\pqmf.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\upsample.py -> temp_build\TTS\vocoder\layers
  copying TTS\vocoder\layers\wavegrad.py -> temp_build\TTS\vocoder\layers
  creating temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\__init__.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\base_vocoder.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\fullband_melgan_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\gan.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\hifigan_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\hifigan_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\melgan_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\melgan_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\melgan_multiscale_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\multiband_melgan_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\parallel_wavegan_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\parallel_wavegan_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\random_window_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\univnet_discriminator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\univnet_generator.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\wavegrad.py -> temp_build\TTS\vocoder\models
  copying TTS\vocoder\models\wavernn.py -> temp_build\TTS\vocoder\models
  creating temp_build\TTS\vocoder\utils
  copying TTS\vocoder\utils\__init__.py -> temp_build\TTS\vocoder\utils
  copying TTS\vocoder\utils\distribution.py -> temp_build\TTS\vocoder\utils
  copying TTS\vocoder\utils\generic_utils.py -> temp_build\TTS\vocoder\utils
  running build_ext
  building 'TTS.tts.utils.monotonic_align.core' extension
  creating build\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align
  "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\bin\HostX64\x64\cl.exe" /c /nologo /O2 /W3 /GL /DNDEBUG /MD -IC:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\numpy\_core\include -IC:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\include "-IC:\Program Files\Python310\include" "-IC:\Program Files\Python310\Include" "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include" "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\VS\include" "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include" "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\VS\include" "-IC:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\ATLMFC\include" "-IC:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um" "-IC:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\winrt" "-IC:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\cppwinrt" /TcTTS/tts/utils/monotonic_align/core.c /Fobuild\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align\core.obj
  core.c
  C:\Users\JF30LB\AppData\Local\Temp\pip-build-env-ibo02uap\overlay\Lib\site-packages\numpy\_core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
  TTS/tts/utils/monotonic_align/core.c(2997): warning C4244: '=': conversion from 'Py_ssize_t' to 'int', possible loss of data
  creating C:\Users\JF30LB\AppData\Local\Temp\pip-install-c_h6w2ws\tts_867911d831d84ffb8561ef98050cb7b1\build\lib.win-amd64-cpython-310\TTS\tts\utils\monotonic_align
  "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\bin\HostX64\x64\link.exe" /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\libs "/LIBPATH:C:\Program Files\Python310\libs" "/LIBPATH:C:\Program Files\Python310" /LIBPATH:C:\Users\JF30LB\Projects\python\Projects\text_to_audio\venv_py310\PCbuild\amd64 "/LIBPATH:C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\lib\x64" "/LIBPATH:C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\lib\x64" "/LIBPATH:C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\ATLMFC\lib\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\ucrt\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\um\x64" /EXPORT:PyInit_core build\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align\core.obj /OUT:build\lib.win-amd64-cpython-310\TTS\tts\utils\monotonic_align\core.cp310-win_amd64.pyd /IMPLIB:build\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align\core.cp310-win_amd64.lib
     Creating library build\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align\core.cp310-win_amd64.lib and object build\temp.win-amd64-cpython-310\Release\TTS\tts\utils\monotonic_align\core.cp310-win_amd64.exp
  Generating code
  Finished generating code
  LINK : fatal error LNK1158: cannot run 'rc.exe'
  error: command 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\bin\\HostX64\\x64\\link.exe' failed with exit code 1158
  [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  ERROR: Failed building wheel for TTS
Failed to build TTS
ERROR: Failed to build installable wheels for some pyproject.toml based projects (TTS)
[27-02-25 15:32:40,15] [COMMAND] Installation TTS dernière version - Fin d'exécution (code: 1) 
[27-02-25 15:32:40,16] [ERROR] Erreur lors de l'exécution de la commande: Installation TTS dernière version (code: 1) 
[27-02-25 15:32:40,18] [ERROR] Échec de l'installation de TTS. Veuillez consulter le fichier log pour plus de détails. 
[27-02-25 15:32:40,20] [INFO] Installation de PyQt6... 
[27-02-25 15:32:40,23] [COMMAND] Désinstallation PyQt6 - Début d'exécution 
WARNING: Skipping PyQt6 as it is not installed.
WARNING: Skipping PyQt6-Qt6 as it is not installed.
WARNING: Skipping PyQt6-sip as it is not installed.
[27-02-25 15:32:40,89] [COMMAND] Désinstallation PyQt6 - Fin d'exécution (code: 0) 
[27-02-25 15:32:40,90] [COMMAND] Installation PyQt6 - Début d'exécution 
Collecting PyQt6==6.5.2
  Downloading PyQt6-6.5.2-cp37-abi3-win_amd64.whl.metadata (2.2 kB)
Collecting PyQt6-Qt6==6.5.2
  Downloading PyQt6_Qt6-6.5.2-py3-none-win_amd64.whl.metadata (551 bytes)
Collecting PyQt6-sip==13.5.2
  Downloading PyQt6_sip-13.5.2-cp310-cp310-win_amd64.whl.metadata (524 bytes)
Downloading PyQt6-6.5.2-cp37-abi3-win_amd64.whl (6.5 MB)
   ---------------------------------------- 6.5/6.5 MB 10.5 MB/s eta 0:00:00
Downloading PyQt6_Qt6-6.5.2-py3-none-win_amd64.whl (59.3 MB)
   ---------------------------------------- 59.3/59.3 MB 10.6 MB/s eta 0:00:00
Downloading PyQt6_sip-13.5.2-cp310-cp310-win_amd64.whl (72 kB)
Installing collected packages: PyQt6-Qt6, PyQt6-sip, PyQt6
Successfully installed PyQt6-6.5.2 PyQt6-Qt6-6.5.2 PyQt6-sip-13.5.2
[27-02-25 15:32:54,35] [COMMAND] Installation PyQt6 - Fin d'exécution (code: 0) 
[27-02-25 15:32:54,39] [INFO] Vérification des installations... 
[27-02-25 15:32:54,43] [INFO] Vérification de numpy... 
[27-02-25 15:32:54,44] [COMMAND] numpy - Début d'exécution 
[27-02-25 15:32:54,52] [COMMAND] numpy - Fin d'exécution (code: 1) 
[27-02-25 15:32:54,54] [ERROR] Erreur lors de l'exécution de la commande: numpy (code: 1) 
[27-02-25 15:32:54,55] [INFO] Vérification de torch... 
[27-02-25 15:32:54,57] [COMMAND] torch - Début d'exécution 
[27-02-25 15:32:54,64] [COMMAND] torch - Fin d'exécution (code: 1) 
[27-02-25 15:32:54,65] [ERROR] Erreur lors de l'exécution de la commande: torch (code: 1) 
[27-02-25 15:32:54,69] [INFO] Vérification de TTS... 
[27-02-25 15:32:54,73] [COMMAND] TTS - Début d'exécution 
[27-02-25 15:32:54,83] [COMMAND] TTS - Fin d'exécution (code: 1) 
[27-02-25 15:32:54,84] [ERROR] Erreur lors de l'exécution de la commande: TTS (code: 1) 
[27-02-25 15:32:54,85] [INFO] Vérification de PyQt6... 
[27-02-25 15:32:54,86] [COMMAND] PyQt6.QtWidgets - Début d'exécution 
[27-02-25 15:32:54,97] [COMMAND] PyQt6.QtWidgets - Fin d'exécution (code: 1) 
[27-02-25 15:32:54,98] [ERROR] Erreur lors de l'exécution de la commande: PyQt6.QtWidgets (code: 1) 
[27-02-25 15:32:54,99] [INFO] Installation terminee 
[27-02-25 15:32:55,01] [INFO] Pour tester, executez: 
[27-02-25 15:32:55,04] [INFO] call .\venv_py310\Scripts\activate.bat 
[27-02-25 15:32:55,06] [INFO] python Simple_TTS_GUI.py 
[27-02-25 15:32:55,07] [INFO] Fichier log disponible: C:\Users\JF30LB\Projects\python\Projects\text_to_audio\logs\setup_env_log.txt 
